<!DOCTYPE html>
<html>
<head>
	<title>Myapp</title>
	<%= stylesheet_link_tag    "application", media: "all", "data-turbolinks-track" => true %>
<%= javascript_include_tag "application", "data-turbolinks-track" => true%>
	<%= javascript_include_tag 'http://maps.googleapis.com/maps/api/js?key=AIzaSyDYey3szhK-xbF9E22Ur5qRdkNM55ufxyo&sensor=false'%>
	<%= javascript_include_tag 'http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.5.2/underscore-min.js'%>
	<meta name="viewport" content="initial-scale=1.0, user-scalable=no">
<meta charset="utf-8">
<style>
input[type=text] {
	padding: 0px;
	margin-bottom: 7px;
}

.btn {
	padding: 0px 6px;
}

html,body,#map-canvas {
	height: 100%;
	margin: 0px;
	padding: 0px
}

#panel {
	position: absolute;
	top: 5px;
	left: 45%;
	margin-left: -180px;
	z-index: 5;
	background-color: #fff;
	padding: 5px;
	/* border: 1px solid #999; */
	background-color: rgba(5,5,5,0.7);
	border: none;
	border-radius: 15px;
	width: 560px;
}

#map-canvas img {
	max-width: none;
}
</style>
<script>
// # Place all the behaviors and hooks related to the matching controller here.
// # All this logic will automatically be available in application.js.
// # You can use CoffeeScript in this file: http://coffeescript.org/

var map;
var directionsDisplay;
var directionsService;
var stepDisplay;
var markerArray = [];

var abcdefghi = [];
var abcdefghi2 = [];
var count=1;

$(document).ready(function($) {

		var sourceBusStops = [];//getBusStopsJSON().busstops;

		// load bus stops data.
		 $.ajax({
			url: "/api/busStopData",
			async: false,
			crossDomain: true,
			headers: "Access-Control-Allow-Origin: 'https://which-bus.herokuapp.com'",
			dataType: 'json',
			success: function(data) {
				sourceBusStops = data.busstops;
			},
			error: function(error) {

			}
		}); 

    var destinationBusStops = sourceBusStops;

    var that = this;

		$('#sourceInput').typeahead({

			source: function(query, process) {
            var results = _.map(sourceBusStops, function(busStop) {
               return busStop.busStopName + "";
            });
            process(results);
        },

        matcher: function(item) {
            return true;
        },

        updater: function(selectedBusStopName) {
            var busStop = _.find(sourceBusStops, function(busStop) {
                return busStop.busStopName == selectedBusStopName;
            });

            that.setSelectedBusStop(busStop);
            
            /* $('input:focus input[type=hidden]').val(busStop.id); */
            $('#sourceInputId').val(busStop.id);
            
            return busStop.busStopName;
        }
		});

		this.setSelectedBusStop = function(busStop) {
        console.log("Selected Bus Stop ID: " + busStop.id);
    }

		
		$('#destinationInput').typeahead({

			source: function(query, process) {
            
            var results = _.map(destinationBusStops, function(busStop) {
               return busStop.busStopName + "";
            });
            process(results);
        },

        matcher: function(item) {
            return true;
        },

        updater: function(selectedBusStopName) {
            var busStop = _.find(destinationBusStops, function(busStop) {
                return busStop.busStopName == selectedBusStopName;
            });

            that.setSelectedBusStop(busStop);
            
            $('#destinationInputId').val(busStop.id);
            
            
            return busStop.busStopName;
        }
		});
		initialize();
		// alert();

})



function initialize() {
  // Instantiate a directions service.
  directionsService = new google.maps.DirectionsService();

  // Create a map and center it on Manhattan.
  /* var manhattan = new google.maps.LatLng(40.7711329, -73.9741874); */
  
  var manhattan = new google.maps.LatLng(31.5497, 74.3436);
  
  var mapOptions = {
    zoom: 8,
    center: manhattan
  }
  map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);

  // Create a renderer for directions and bind it to the map.
  var rendererOptions = {
    map: map
  }
  directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions)

  // Instantiate an info window to hold step text.
  stepDisplay = new google.maps.InfoWindow();
}


function attachInstructionText(marker, text) {
  google.maps.event.addListener(marker, 'click', function() {
    // Open an info window when the marker is clicked on,
    // containing the text of the step.
    stepDisplay.setContent(text);
    stepDisplay.open(map, marker);
  });
}

function markallstops(){
	/* var a ="hello"; */
	
	// removing previous markers from map
	for (var i = 0; i < markerArray.length; i++) {
	    markerArray[i].setMap(null);
	  }
	
	
	// Now, clear the array itself.
	  markerArray = [];

	
	
	// to pass from specified stations
	var waypts = [];
	
	
	// previous of w "31.5255", "74.2835"
	// previous of u "31.468515", "74.307229"
	
	//31.531013,74.282681
	
	// 31.531342,74.299718
	
	/* var q=new google.maps.LatLng("31.523925","74.283030");
	var w=new google.maps.LatLng("31.531013","74.282681");
	var t=new google.maps.LatLng("31.5412115", "74.293291");
	var u=new google.maps.LatLng("31.531342", "74.299718");
	
	
	
	var location=new Array();
	location[0]=q;
	location[1]=w;
	location[2]=t;
	location[3]=u;
	
	
	var stopName= new Array(); 
	stopName[0]= "stop1";
	stopName[1]= "stop2";
	stopName[2]= "stop3";
	stopName[3]="stop4"; */
	
	/* alert("test"); */
	
	
	var stopName = abcdefghi;
	var location = abcdefghi2;
	
	
console.log("stopName array"+stopName.length);
console.log("location array"+location.length);

	var firstLocation=location[0];
	var temp= location.length;
	var lastLocation= location[temp-1];
	

console.log("firstLocation"+firstLocation);
console.log("lastLocation"+lastLocation);
	






	
	// try code 
	
		// this will be called for each point of stop
	//for (var i=0;i < stopName.length; i++){
	var request = {
		      origin: firstLocation,
		      destination: lastLocation,
		      waypoints: waypts,
		      optimizeWaypoints: true,
		      /* travelMode: google.maps.TravelMode.WALKING */
		     travelMode: google.maps.TravelMode.DRIVING
		  };
	
	 directionsService.route(request, function(response, status) {
		    if (status == google.maps.DirectionsStatus.OK) {
		      /* var warnings = document.getElementById('warnings_panel');
		      warnings.innerHTML = '<b>' + response.routes[0].warnings + '</b>'; */
		      /*   var a = response.routes[0]
		      alert(a); 
		       var b = response.routes[0].legs[0].steps.length
		      alert (b);
		      var c= response.routes[0].legs[0].end_address
		      alert(c);
		      var d = response.routes[0].legs[0].start_address
		      alert(d); */
		      
		    /*   var e= response.routes[0].legs[0].steps[3].end_location
		      alert(e);
		      var f = response.routes[0].legs[0].steps[3].start_location
		      alert(f);
		      
		      var g = response.routes[0].legs[0].steps[3].instructions
		      alert(g); */
		      
		      directionsDisplay.setDirections(response);
		     // showSteps(response);
		    }
		  })
	
	
	
	
	
	// 
	
	
	for (var i = 0; i < stopName.length; i++) {
	  var loc=location[i];
	  var nam= stopName[i];
	  
	  
	  markstop(loc,i,nam);
	lastLocation=location[i];
	
	waypts.push({
          location:loc,
          stopover:true
      });
	
	
} 
	
	
	

}

function markstop(location,i,name){
	/* alert(a); */
	//var location = new google.maps.LatLng(lat, lng);
	     var marker = new google.maps.Marker({
	      position: location,
	      title : name,
	      icon : '/assets/busstop.png',
	      //<%=  asset_path 'busstop.png' %> ''
	   //   direction : name,
	      //icon: 
	      map: map
	    }); 
	  //  attachInstructionText(marker, myRoute.steps[i].instructions);
	    markerArray[i] = marker;
	  /*   markers.push(new google.maps.Marker({
	        map: map,
	        position: location,
	        title: myloc
	    })); */
	    
	    
	    /* markers[markers.length - 1]['infowin'] = new google.maps.InfoWindow({
	        content: '<div>This is a marker in ' + myloc + '</div>'
	    }); */
	    
}


/*google.maps.event.addDomListener(window, 'load', initialize);
*/


// services calling code 

function getRouteInfo() {

		 $.ajax({
   			url: "/api/showRoute",
   			async: false,
   			dataType: 'JSON',
   			type: 'POST',
   			data: {startLatLong: $('#sourceInputId').val(), destinationLatLong: $('#destinationInputId').val()},
   			success: function(data) {
   				showRoutes(data);
   				markallstops();
   			},
   			error: function(error) {
   				alert("Ooopsss! Unexpected Error Occurred...");
   			}
   		}); 
   		console.log("Source ID: " + $('#sourceInputId').val() + "\nDestination ID: " + $('#destinationInputId').val());
   		
	// // var data = {
	// // 	    "status": "OK",
	// // 	    "route": {
	// // 	        "id": 1,
	// // 	        "routeName": "Metro",
	// // 	        "routeDistance": "27.0",
	// // 	        "routeSourceLatLong": "31.3921306,74.3626678",
	// // 	        "routeDestLatLong": "31.676697,74.2907372",
	// // 	        "routeTravelTime": null,
	// // 	        "routeStartTime": null,
	// // 	        "routeStopTime": null,
	// // 	        "admin_id": null,
	// // 	        "created_at": "2014-01-19T00:26:09.583Z",
	// // 	        "updated_at": "2014-01-19T00:26:09.583Z",
	// // 	        "routeSourceName": "Gajju Matta Bus Stop",
	// // 	        "routeDestName": "Shahdara Bus Stop"
	// // 	    },
	// // 	    "busstops": [
	// // 	        {
	// // 	            "id": 1,
	// // 	            "busStopName": "Gajju Matta Bus Stop",
	// // 	            "busStopLatLong": "31.3921306,74.3626678",
	// // 	            "busStopSecName": "",
	// // 	            "admin_id": null,
	// // 	            "created_at": "2014-01-19T00:26:08.271Z",
	// // 	            "updated_at": "2014-01-19T00:26:08.271Z"
	// // 	        },
	// // 	        {
	// // 	            "id": 2,
	// // 	            "busStopName": "Dulam Bus Station",
	// // 	            "busStopLatLong": "31.4055831,74.3604427",
	// // 	            "busStopSecName": "",
	// // 	            "admin_id": null,
	// // 	            "created_at": "2014-01-19T00:26:08.283Z",
	// // 	            "updated_at": "2014-01-19T00:26:08.283Z"
	// // 	        },
	// // 	        {
	// // 	            "id": 3,
	// // 	            "busStopName": "Youhanabad Bus Station",
	// // 	            "busStopLatLong": "31.4128577,74.3594346",
	// // 	            "busStopSecName": "",
	// // 	            "admin_id": null,
	// // 	            "created_at": "2014-01-19T00:26:08.292Z",
	// // 	            "updated_at": "2014-01-19T00:26:08.292Z"
	// // 	        },
	// // 	        {
	// // 	            "id": 4,
	// // 	            "busStopName": "Nishtar Bus Station",
	// // 	            "busStopLatLong": "31.4201076,74.3583883",
	// // 	            "busStopSecName": "",
	// // 	            "admin_id": null,
	// // 	            "created_at": "2014-01-19T00:26:08.300Z",
	// // 	            "updated_at": "2014-01-19T00:26:08.300Z"
	// // 	        },
	// // 	        {
	// // 	            "id": 5,
	// // 	            "busStopName": "Atari Darbar Bus Station",
	// // 	            "busStopLatLong": "31.4311441,74.3566854",
	// // 	            "busStopSecName": "",
	// // 	            "admin_id": null,
	// // 	            "created_at": "2014-01-19T00:26:08.309Z",
	// // 	            "updated_at": "2014-01-19T00:26:08.309Z"
	// // 	        }
	// // 	    ]
	// // 	};
	// // 	showRoutes(data);
		

	// 	// markallstops
		
	// 	markallstops();
		
		
	}

	function showRoutes(data) {

		var stopName = [];
		var location = [];
		
		var busStops = data.busstops;

		for (var i = 0; i < busStops.length; i++) {
			stopName[i] = busStops[i].busStopName;
			location[i] = getLocationInfo(busStops[i].busStopLatLong);
			console.log("stopName" + stopName[i]);
		};

		abcdefghi = stopName;
		abcdefghi2 = location;
	}

	//gets location from google maps
	function getLocationInfo(latLong) {
		var latLongSplitted = latLong.split(',');

		return new google.maps.LatLng(latLongSplitted[0], latLongSplitted[1]);

	}

	!function($){"use strict";var Typeahead=function(element,options){this.$element=$(element),this.options=$.extend({},$.fn.typeahead.defaults,options),this.matcher=this.options.matcher||this.matcher,this.sorter=this.options.sorter||this.sorter,this.select=this.options.select||this.select,this.autoSelect="boolean"==typeof this.options.autoSelect?this.options.autoSelect:!0,this.highlighter=this.options.highlighter||this.highlighter,this.updater=this.options.updater||this.updater,this.source=this.options.source,this.$menu=$(this.options.menu),this.shown=!1,this.listen(),this.showHintOnFocus="boolean"==typeof this.options.showHintOnFocus?this.options.showHintOnFocus:!1};Typeahead.prototype={constructor:Typeahead,select:function(){var val=this.$menu.find(".active").attr("data-value");return(this.autoSelect||val)&&this.$element.val(this.updater(val)).change(),this.hide()},updater:function(item){return item},setSource:function(source){this.source=source},show:function(){var scrollHeight,pos=$.extend({},this.$element.position(),{height:this.$element[0].offsetHeight});return scrollHeight="function"==typeof this.options.scrollHeight?this.options.scrollHeight.call():this.options.scrollHeight,this.$menu.insertAfter(this.$element).css({top:pos.top+pos.height+scrollHeight,left:pos.left}).show(),this.shown=!0,this},hide:function(){return this.$menu.hide(),this.shown=!1,this},lookup:function(query){var items;return this.query="undefined"!=typeof query&&null!=query?query:this.$element.val()||"",this.query.length<this.options.minLength?this.shown?this.hide():this:(items=$.isFunction(this.source)?this.source(this.query,$.proxy(this.process,this)):this.source,items?this.process(items):this)},process:function(items){var that=this;return items=$.grep(items,function(item){return that.matcher(item)}),items=this.sorter(items),items.length?"all"==this.options.items||0==this.options.minLength&&!this.$element.val()?this.render(items).show():this.render(items.slice(0,this.options.items)).show():this.shown?this.hide():this},matcher:function(item){return~item.toLowerCase().indexOf(this.query.toLowerCase())},sorter:function(items){for(var item,beginswith=[],caseSensitive=[],caseInsensitive=[];item=items.shift();)item.toLowerCase().indexOf(this.query.toLowerCase())?~item.indexOf(this.query)?caseSensitive.push(item):caseInsensitive.push(item):beginswith.push(item);return beginswith.concat(caseSensitive,caseInsensitive)},highlighter:function(item){var query=this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&");return item.replace(new RegExp("("+query+")","ig"),function($1,match){return"<strong>"+match+"</strong>"})},render:function(items){var that=this;return items=$(items).map(function(i,item){return i=$(that.options.item).attr("data-value",item),i.find("a").html(that.highlighter(item)),i[0]}),this.autoSelect&&items.first().addClass("active"),this.$menu.html(items),this},next:function(){var active=this.$menu.find(".active").removeClass("active"),next=active.next();next.length||(next=$(this.$menu.find("li")[0])),next.addClass("active")},prev:function(){var active=this.$menu.find(".active").removeClass("active"),prev=active.prev();prev.length||(prev=this.$menu.find("li").last()),prev.addClass("active")},listen:function(){this.$element.on("focus",$.proxy(this.focus,this)).on("blur",$.proxy(this.blur,this)).on("keypress",$.proxy(this.keypress,this)).on("keyup",$.proxy(this.keyup,this)),this.eventSupported("keydown")&&this.$element.on("keydown",$.proxy(this.keydown,this)),this.$menu.on("click",$.proxy(this.click,this)).on("mouseenter","li",$.proxy(this.mouseenter,this)).on("mouseleave","li",$.proxy(this.mouseleave,this))},destroy:function(){this.$element.data("typeahead",null),this.$element.off("focus").off("blur").off("keypress").off("keyup"),this.eventSupported("keydown")&&this.$element.off("keydown"),this.$menu.remove()},eventSupported:function(eventName){var isSupported=eventName in this.$element;return isSupported||(this.$element.setAttribute(eventName,"return;"),isSupported="function"==typeof this.$element[eventName]),isSupported},move:function(e){if(this.shown){switch(e.keyCode){case 9:case 13:case 27:e.preventDefault();break;case 38:e.preventDefault(),this.prev();break;case 40:e.preventDefault(),this.next()}e.stopPropagation()}},keydown:function(e){this.suppressKeyPressRepeat=~$.inArray(e.keyCode,[40,38,9,13,27]),this.shown||40!=e.keyCode?this.move(e):this.lookup("")},keypress:function(e){this.suppressKeyPressRepeat||this.move(e)},keyup:function(e){switch(e.keyCode){case 40:case 38:case 16:case 17:case 18:break;case 9:case 13:if(!this.shown)return;this.select();break;case 27:if(!this.shown)return;this.hide();break;default:this.lookup()}e.stopPropagation(),e.preventDefault()},focus:function(){this.focused||(this.focused=!0,(0==this.options.minLength&&!this.$element.val()||this.options.showHintOnFocus)&&this.lookup())},blur:function(){this.focused=!1,!this.mousedover&&this.shown&&this.hide()},click:function(e){e.stopPropagation(),e.preventDefault(),this.select(),this.$element.focus()},mouseenter:function(e){this.mousedover=!0,this.$menu.find(".active").removeClass("active"),$(e.currentTarget).addClass("active")},mouseleave:function(){this.mousedover=!1,!this.focused&&this.shown&&this.hide()}};var old=$.fn.typeahead;$.fn.typeahead=function(option){var arg=arguments;return this.each(function(){var $this=$(this),data=$this.data("typeahead"),options="object"==typeof option&&option;data||$this.data("typeahead",data=new Typeahead(this,options)),"string"==typeof option&&(arg.length>1?data[option].apply(data,Array.prototype.slice.call(arg,1)):data[option]())})},$.fn.typeahead.defaults={source:[],items:8,menu:'<ul class="typeahead dropdown-menu"></ul>',item:'<li><a href="#"></a></li>',minLength:1,scrollHeight:0,autoSelect:!0},$.fn.typeahead.Constructor=Typeahead,$.fn.typeahead.noConflict=function(){return $.fn.typeahead=old,this},$(document).on("focus.typeahead.data-api",'[data-provide="typeahead"]',function(){var $this=$(this);$this.data("typeahead")||$this.typeahead($this.data())})}(window.jQuery);


</script>
</head>
<body>
	<%= yield %>
</body>
</html>